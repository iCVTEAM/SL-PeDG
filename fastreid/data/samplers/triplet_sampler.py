# encoding: utf-8
"""
@author:  liaoxingyu
@contact: liaoxingyu2@jd.com
"""

import copy
import itertools
from collections import defaultdict
from typing import Optional

import numpy as np
from torch.utils.data.sampler import Sampler

from fastreid.utils import comm


def no_index(a, b):
    assert isinstance(a, list)
    return [i for i, j in enumerate(a) if j != b]


def reorder_index(batch_indices, world_size):
    r"""Reorder indices of samples to align with DataParallel training.
    In this order, each process will contain all images for one ID, triplet loss
    can be computed within each process, and BatchNorm will get a stable result.
    Args:
        batch_indices: A batched indices generated by sampler
        world_size: number of process
    Returns:

    """
    mini_batchsize = len(batch_indices) // world_size
    reorder_indices = []
    for i in range(0, mini_batchsize):
        for j in range(0, world_size):
            reorder_indices.append(batch_indices[i + j * mini_batchsize])
    return reorder_indices


class BalancedIdentitySampler(Sampler):
    def __init__(self, data_source: str, mini_batch_size: int, num_instances: int, seed: Optional[int] = None):
        self.data_source = data_source
        self.num_instances = num_instances
        self.num_pids_per_batch = mini_batch_size // self.num_instances

        self._rank = comm.get_rank()
        self._world_size = comm.get_world_size()
        self.batch_size = mini_batch_size * self._world_size

        self.index_pid = dict()
        self.pid_cam = defaultdict(list)
        self.pid_index = defaultdict(list)

        for index, info in enumerate(data_source):
            pid = info[1]
            camid = info[2]
            self.index_pid[index] = pid
            self.pid_cam[pid].append(camid)
            self.pid_index[pid].append(index)

        self.pids = sorted(list(self.pid_index.keys()))
        self.num_identities = len(self.pids)

        if seed is None:
            seed = comm.shared_random_seed()
        self._seed = int(seed)

        self._rank = comm.get_rank()
        self._world_size = comm.get_world_size()

    def __iter__(self):
        start = self._rank
        yield from itertools.islice(self._infinite_indices(), start, None, self._world_size)

    def _infinite_indices(self):
        np.random.seed(self._seed)
        while True:
            # Shuffle identity list
            identities = np.random.permutation(self.num_identities)

            # If remaining identities cannot be enough for a batch,
            # just drop the remaining parts
            drop_indices = self.num_identities % (self.num_pids_per_batch * self._world_size)
            if drop_indices: identities = identities[:-drop_indices]

            batch_indices = []
            for kid in identities:
                i = np.random.choice(self.pid_index[self.pids[kid]])
                _, i_pid, i_cam = self.data_source[i]
                batch_indices.append(i)
                pid_i = self.index_pid[i]
                cams = self.pid_cam[pid_i]
                index = self.pid_index[pid_i]
                select_cams = no_index(cams, i_cam)

                if select_cams:
                    if len(select_cams) >= self.num_instances:
                        cam_indexes = np.random.choice(select_cams, size=self.num_instances - 1, replace=False)
                    else:
                        cam_indexes = np.random.choice(select_cams, size=self.num_instances - 1, replace=True)
                    for kk in cam_indexes:
                        batch_indices.append(index[kk])
                else:
                    select_indexes = no_index(index, i)
                    if not select_indexes:
                        # Only one image for this identity
                        ind_indexes = [0] * (self.num_instances - 1)
                    elif len(select_indexes) >= self.num_instances:
                        ind_indexes = np.random.choice(select_indexes, size=self.num_instances - 1, replace=False)
                    else:
                        ind_indexes = np.random.choice(select_indexes, size=self.num_instances - 1, replace=True)

                    for kk in ind_indexes:
                        batch_indices.append(index[kk])

                if len(batch_indices) == self.batch_size:
                    yield from reorder_index(batch_indices, self._world_size)
                    batch_indices = []


class NaiveIdentitySampler(Sampler):
    """
    Randomly sample N identities, then for each identity,
    randomly sample K instances, therefore batch size is N*K.
    Args:
    - data_source (list): list of (img_path, pid, camid).
    - num_instances (int): number of instances per identity in a batch.
    - batch_size (int): number of examples in a batch.
    """

    def __init__(self, data_source: str, mini_batch_size: int, num_instances: int, seed: Optional[int] = None):
        self.data_source = data_source
        self.num_instances = num_instances
        self.num_pids_per_batch = mini_batch_size // self.num_instances

        self._rank = comm.get_rank()
        self._world_size = comm.get_world_size()
        self.batch_size = mini_batch_size * self._world_size

        self.pid_index = defaultdict(list)

        for index, info in enumerate(data_source):
            pid = info[1]
            self.pid_index[pid].append(index)

        self.pids = sorted(list(self.pid_index.keys()))
        self.num_identities = len(self.pids)

        if seed is None:
            seed = comm.shared_random_seed()
        self._seed = int(seed)

    def __iter__(self):
        start = self._rank
        yield from itertools.islice(self._infinite_indices(), start, None, self._world_size)

    def _infinite_indices(self):
        np.random.seed(self._seed)
        while True:
            avl_pids = copy.deepcopy(self.pids)
            batch_idxs_dict = {}

            batch_indices = []
            while len(avl_pids) >= self.num_pids_per_batch:
                selected_pids = np.random.choice(avl_pids, self.num_pids_per_batch, replace=False).tolist()
                for pid in selected_pids:
                    # Register pid in batch_idxs_dict if not
                    if pid not in batch_idxs_dict:
                        idxs = copy.deepcopy(self.pid_index[pid])
                        if len(idxs) < self.num_instances:
                            idxs = np.random.choice(idxs, size=self.num_instances, replace=True).tolist()
                        np.random.shuffle(idxs)
                        batch_idxs_dict[pid] = idxs

                    avl_idxs = batch_idxs_dict[pid]
                    for _ in range(self.num_instances):
                        batch_indices.append(avl_idxs.pop(0))

                    if len(avl_idxs) < self.num_instances: avl_pids.remove(pid)

                if len(batch_indices) == self.batch_size:
                    yield from reorder_index(batch_indices, self._world_size)
                    batch_indices = []


class DomainSplitBalancedSampler(Sampler):
    """
    The proposed stochastic sampler.
    Args:
    - data_source (list): list of (img_path, pid, camid, domainid).
    - num_instances (int): number of instances per identity in a batch.
    - step (int): number of the sliding window step.
    - shuffle (bool): whether to shuffle the sort of subsets.
    - num_src_domains (int): number of sources in the sliding window.
    - min_len (int): minimum size of one subset.
    - step_iters (int): number of step iterations.
    """ 
    def __init__(self, data_source: str, mini_batch_size: int, num_instances: int, step: int, shuffle: bool,
                 num_src_domains: int, min_len: int = 0, step_iters: int = 1, seed: Optional[int] = None):        
        self.data_source = data_source
        self.step = step
        self.shuffle = shuffle
        self.step_iters = step_iters
        self.num_src_domains = num_src_domains
        self.num_instances = num_instances
        self.num_pids_per_batch = mini_batch_size // self.num_instances

        self._rank = comm.get_rank()
        self._world_size = comm.get_world_size()
        self.batch_size = mini_batch_size * self._world_size

        self.did_pids = defaultdict(list)
        self.did_ins = defaultdict(int)
        self.pid_index = defaultdict(list)
        self.domains = []

        for index, info in enumerate(data_source):
            pid = info[1]
            did = info[3]
            self.pid_index[pid].append(index)
            if pid not in self.did_pids[did]:
                self.did_pids[did].append(pid)
            if did not in self.did_ins:
                self.did_ins[did] = 1
            else:
                self.did_ins[did] += 1
            if did not in self.domains:
                self.domains.append(did)

        if min_len > 0:
            min_ins = min_len
        else:
            min_ins = 0
            for i, did in enumerate(self.did_ins):
                if i == 0:
                    min_ins = self.did_ins[did]
                elif self.did_ins[did] < min_ins:
                    min_ins = self.did_ins[did]

        did_num = len(self.domains)
        self.all_did_pids = defaultdict(list)
        for did in self.did_pids:
            split_num = round(self.did_ins[did] / min_ins)
            subset_len = self.did_ins[did] // split_num

            cur_split = 0
            cur_len = 0
            for pid in self.did_pids[did]:
                if cur_split == 0:
                    if cur_len < subset_len:
                        self.all_did_pids[did].append(pid)
                        cur_len += len(self.pid_index[pid])
                    else:
                        cur_len = 0
                        cur_split += 1
                        did_num = did + len(self.domains)
                elif cur_split < split_num - 1:
                    if cur_len < subset_len:
                        self.all_did_pids[did_num].append(pid)
                        cur_len += len(self.pid_index[pid])
                    else:
                        cur_len = 0
                        cur_split += 1
                        did_num += len(self.domains)
                else:
                    self.all_did_pids[did_num].append(pid)

        did_new_dids = defaultdict(list)
        did_num = defaultdict(int)
        for did in self.all_did_pids.keys():
            ori_did = did % len(self.domains)
            did_new_dids[ori_did].append(did)
            if ori_did not in did_num:
                did_num[ori_did] = 1
            else:
                did_num[ori_did] += 1

        sorted_new_did = sorted(did_num, key=lambda x: did_num[x])
        sorted_num_did = sorted(did_num.values())

        self.max_did = sorted_new_did[-1]
        self.max_num_did = sorted_num_did[-2]
        self.ori_did_new_dids = did_new_dids

        self.all_domains = []

        np.random.shuffle(self.ori_did_new_dids[self.max_did])
        self.max_num_did += (self.num_src_domains + self.step // 2)
        for i in range(self.max_num_did):
            for did in self.ori_did_new_dids:
                if i < len(self.ori_did_new_dids[did]):
                    self.all_domains.append(self.ori_did_new_dids[did][i])


        if seed is None:
            seed = comm.shared_random_seed()
        self._seed = int(seed)

    def __iter__(self):
        start = self._rank
        yield from itertools.islice(self._infinite_indices(), start, None, self._world_size)

    def _infinite_indices(self):
        np.random.seed(self._seed)
        all_domains = copy.deepcopy(self.all_domains)
        first_domain_list = all_domains[:self.step]
        cur_iter = 0
        while True:
            avl_source_pids = []
            for did in all_domains[:self.num_src_domains]:
                avl_source_pids.extend(copy.deepcopy(self.all_did_pids[did]))

            cur_iter += 1
            if cur_iter % self.step_iters == 0:
                for i in range(self.step):
                    all_domains.append(all_domains.pop(0))

                if self.shuffle and all_domains[0] in first_domain_list:
                    all_domains = []
                    for did in self.ori_did_new_dids:
                        if did == self.max_did:
                            all_domains.extend(self.ori_did_new_dids[self.max_did][:self.max_num_did + 1])
                            for _ in range(self.max_num_did + 1):
                                self.ori_did_new_dids[self.max_did].append(self.ori_did_new_dids[self.max_did].pop(0))
                        else:
                            all_domains.extend(self.ori_did_new_dids[did])
                    all_domains = sorted(all_domains)

                    first_domain_list = all_domains[:self.step]

            batch_idxs_dict = {}
            batch_indices = []

            while len(avl_source_pids) >= self.num_pids_per_batch:
                selected_pids = np.random.choice(avl_source_pids, self.num_pids_per_batch, replace=False).tolist()
                for pid in selected_pids:
                    # Register pid in batch_idxs_dict if not
                    if pid not in batch_idxs_dict:
                        idxs = copy.deepcopy(self.pid_index[pid])
                        if len(idxs) < self.num_instances:
                            idxs = np.random.choice(idxs, size=self.num_instances, replace=True).tolist()
                        np.random.shuffle(idxs)
                        batch_idxs_dict[pid] = idxs

                    avl_idxs = batch_idxs_dict[pid]
                    for _ in range(self.num_instances):
                        batch_indices.append(avl_idxs.pop(0))

                    if len(avl_idxs) < self.num_instances: avl_source_pids.remove(pid)

                if len(batch_indices) == self.batch_size:
                    yield from reorder_index(batch_indices, self._world_size)
                    batch_indices = []
