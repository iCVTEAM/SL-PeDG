# encoding: utf-8
"""
@author:  liaoxingyu
@contact: liaoxingyu2@jd.com
"""

import glob
import os.path as osp
import re
import random
import torch

from .bases import ImageDataset
from ..datasets import DATASET_REGISTRY
from fastreid.utils.file_io import PathManager


@DATASET_REGISTRY.register()
class DG_DukeMTMC(ImageDataset):
    """DukeMTMC-reID.

    Reference:
        - Ristani et al. Performance Measures and a Data Set for Multi-Target, Multi-Camera Tracking. ECCVW 2016.
        - Zheng et al. Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro. ICCV 2017.

    URL: `<https://github.com/layumi/DukeMTMC-reID_evaluation>`_

    Dataset statistics:
        - identities: 1404 (train + query).
        - images:16522 (train) + 2228 (query) + 17661 (gallery).
        - cameras: 8.
    """
    dataset_dir = "DukeMTMC-reID"
    dataset_name = "dukemtmc"

    def __init__(self, root='datasets', **kwargs):
        # self.root = osp.abspath(osp.expanduser(root))
        self.root = root
        if 'domain' in kwargs.keys():
            self.domain_id = kwargs['domain']
        else:
            self.domain_id = 0

        cfg = kwargs['cfg']
        is_val = cfg.DATASETS.SPLIT_VAL
        val_pids = cfg.DATASETS.VAL_PIDS

        self.dataset_dir = osp.join(self.root, self.dataset_dir)
        self.train_dir = osp.join(self.dataset_dir, 'bounding_box_train')
        self.query_dir = osp.join(self.dataset_dir, 'query')
        self.gallery_dir = osp.join(self.dataset_dir, 'bounding_box_test')
        self.val_pid_list = []
        self.train_pid_list = []

        required_files = [
            self.dataset_dir,
            self.train_dir,
            self.query_dir,
            self.gallery_dir,
        ]
        self.check_before_run(required_files)

        train = self.process_dir(self.train_dir)
        query, val_query = self.split_val(self.query_dir, is_train=True, is_val=is_val, val_pids=val_pids)
        gallery, val_gallery = self.split_val(self.gallery_dir, is_train=True, is_val=is_val, val_pids=val_pids)
        train = train + query + gallery


        super(DG_DukeMTMC, self).__init__(train, val_query, val_gallery, **kwargs)

    def process_dir(self, dir_path, is_train=True):
        img_paths = glob.glob(osp.join(dir_path, '*.jpg'))
        pattern = re.compile(r'([-\d]+)_c(\d)')

        data = []
        for img_path in img_paths:
            pid, camid = map(int, pattern.search(img_path).groups())
            assert 1 <= camid <= 8
            camid -= 1  # index starts from 0
            if is_train:
                pid = self.dataset_name + "_" + str(pid)
                camid = self.dataset_name + "_" + str(camid)
                if pid not in self.train_pid_list:
                    self.train_pid_list.append(pid)

            data.append((img_path, pid, camid, self.domain_id))

        return data

    def split_val(self, dir_path, is_train=True, is_val=False, val_pids=50):
        img_paths = glob.glob(osp.join(dir_path, '*.jpg'))
        pattern = re.compile(r'([-\d]+)_c(\d)')

        data = []
        val_data = []
        for img_path in img_paths:
            pid, camid = map(int, pattern.search(img_path).groups())
            assert 1 <= camid <= 8
            camid -= 1  # index starts from 0
            if is_train:
                if is_val and (len(self.val_pid_list) < val_pids or pid in self.val_pid_list):
                    val_data.append((img_path, pid, camid, self.domain_id))
                    if pid not in self.val_pid_list: self.val_pid_list.append(pid)

                else:
                    pid = self.dataset_name + "_" + str(pid)
                    camid = self.dataset_name + "_" + str(camid)
                    data.append((img_path, pid, camid, self.domain_id))
                    if pid not in self.train_pid_list:
                        self.train_pid_list.append(pid)
            else:
                val_data.append((img_path, pid, camid, self.domain_id))

        return data, val_data
